git 教程

1. git简介

1.1 安装git
git config --global user.name "Your Name"
git config --global user.email "email@example.com"

1.2 创建版本库
创建空目录
mkdir new
cd new
pwd /e/work/new
初始化一个Git仓库：git init
添加文件到Git仓库：
    第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
    第二步，使用命令git commit，完成。可以一次性传多个

2. 时光机穿梭

要随时掌握工作区的状态：git status
如果git status告诉你有文件被修改过，用git diff可以查看修改内容。

2.1 版本回退
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。加--pretty=oneline 略缩列表
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

2.2 工作区和暂存区
2.3 管理修改
git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
2.4 撤销修改
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，
    第一步用命令git reset HEAD file，就回到了场景1，
    第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。git reset --hard commit_id

2.5 删除文件
删除文件管理器中文件：rm test.txt
删除版本库中文件： git rm test.txt

3. 远程仓库
创建ssh key：ssh-keygen -t rsa -C "youremail@example.com"
用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。

3.1 添加远程仓库
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

3.2 从远程库克隆
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令。git clone git@github.com:w420512817/new.git
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

4. 分支管理

4.1 创建与合并分支
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

4.2 解决冲突 
用git log --graph命令可以看到分支合并图
git log --graph --pretty=oneline --abbrev-commit （略缩图）

4.3 分支管理策略
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
git merge --no-ff -m "..." dev

4.4 bug分支
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。
恢复stash 工作现场
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了。

4.5 分支强制删除
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

4.6多人协作
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。

5. 标签管理

5.1 创建标签
命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag -a <tagname> -m "blablabla..."可以指定标签信息；
git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
命令git tag可以查看所有标签。
用命令git show <tagname>可以看到说明文字

5.2 操作标签
命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。
